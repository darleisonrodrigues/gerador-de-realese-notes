from crewai import Agent, Task, Crew
from groq import Groq
import os

class ReleaseNotesCrewAI:
    def __init__(self):
        self.client = Groq(
            api_key=os.getenv("GROQ_API_KEY")
        )
    
    def generate_simple_description(self, task_data):
        """Gera descri√ß√£o simples usando prompt espec√≠fico"""
        try:
            prompt = f"""# Voc√™ √© um especialista em documenta√ß√£o t√©cnica. Sua tarefa √© criar uma descri√ß√£o concisa e clara para release notes com base na descri√ß√£o de uma task do Jira.

## ENTRADA
Task ID: {task_data['jira_task_id']}
Tipo: {task_data['tipo_task']} 
Descri√ß√£o original: 
{task_data['jira_task_description']}

## SA√çDA ESPERADA
Gere APENAS o texto descritivo que ir√° abaixo do t√≠tulo da task. N√£o inclua o t√≠tulo da task, links ou formata√ß√£o de imagens. Seu texto deve:

1. Para Hist√≥ria: Explicar o que foi implementado, como funciona do ponto de vista do usu√°rio e qual o benef√≠cio.
2. Para Bug: Explicar qual era o problema e como foi resolvido.

Use linguagem clara e profissional, evite termos t√©cnicos desnecess√°rios, e mantenha o texto entre 2-5 frases.

Exemplo do formato esperado para Hist√≥ria:
"Adicionamos um informativo mostrando o motivo do status de 'bloqueado' e status 'em observa√ß√£o'. Essa bottomsheet √© mostrada ao clicar no status dos pontos de venda, na tela de Minuto de ouro e nas listagens de Rotas e Carteira."

Exemplo do formato esperado para Bug:
"Existia um bug no app em que o PDF de um pedido tinha o 'valor unit√°rio' e 'pre√ßo por KG' calculados incorretamente. Esse valor estava errado apenas no PDF, na tela de consulta estava correto. Nessa vers√£o igualamos as duas informa√ß√µes, calculando corretamente para itens com peso vari√°vel."
"""
            
            # Usar a API do Groq diretamente
            response = self.client.chat.completions.create(
                model="llama3-8b-8192",
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1024
            )
            
            return response.choices[0].message.content.strip()
                
        except Exception as e:
            raise Exception(f"Erro ao gerar descri√ß√£o: {str(e)}")
    
    def create_agents(self):
        """Cria os agentes especializados para gerar release notes"""
        
        # Agente 1: Analista de Requirements
        requirements_analyst = Agent(
            role="Analista de Requirements",
            goal="Analisar e interpretar as descri√ß√µes de tasks do Jira para identificar funcionalidades e impactos",
            backstory="""Voc√™ √© um analista experiente em desenvolvimento de software que trabalha h√° anos 
            analisando requirements e documenta√ß√µes t√©cnicas. Voc√™ tem a habilidade de extrair informa√ß√µes 
            importantes de descri√ß√µes t√©cnicas e transform√°-las em insights claros sobre o que foi implementado.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agente 2: Redator T√©cnico
        technical_writer = Agent(
            role="Redator T√©cnico Especialista em Release Notes",
            goal="Criar descri√ß√µes claras e amig√°veis para usu√°rios finais sobre novas funcionalidades e corre√ß√µes",
            backstory="""Voc√™ √© um redator t√©cnico especializado em comunica√ß√£o para usu√°rios finais. 
            Sua expertise est√° em transformar informa√ß√µes t√©cnicas complexas em linguagem clara e acess√≠vel, 
            focando sempre nos benef√≠cios e impactos pr√°ticos para o usu√°rio. Voc√™ entende perfeitamente 
            o formato e estilo de release notes corporativas.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        # Agente 3: Revisor de Release Notes
        release_notes_reviewer = Agent(
            role="Revisor e Formatador de Release Notes",
            goal="Garantir que as release notes sigam o formato correto e padr√µes estabelecidos",
            backstory="""Voc√™ √© um especialista em documenta√ß√£o t√©cnica e conhece profundamente 
            os padr√µes de release notes para o Azure DevOps. Voc√™ garante que toda documenta√ß√£o 
            siga os formatos corretos, tenha consist√™ncia de estilo e atenda aos padr√µes corporativos.""",
            verbose=True,
            allow_delegation=False,
            llm=self.llm
        )
        
        return requirements_analyst, technical_writer, release_notes_reviewer
    
    def create_tasks(self, task_data, agents, image_path=None):
        """Cria as tasks para cada agente"""
        requirements_analyst, technical_writer, release_notes_reviewer = agents
        
        # Task 1: An√°lise de Requirements
        analysis_task = Task(
            description=f"""
            Analise a seguinte task do Jira e extraia informa√ß√µes importantes:
            
            **Tipo:** {task_data['tipo_task']}
            **ID:** {task_data['jira_task_id']}
            **T√≠tulo:** {task_data['jira_task_title']}
            **Descri√ß√£o:** {task_data['jira_task_description']}
            {f"**Imagem de evid√™ncia:** {task_data['evidence_image']}" if task_data['evidence_image'] else ""}
            
            Identifique:
            1. O que foi implementado ou corrigido
            2. Qual o impacto para o usu√°rio final
            3. Principais benef√≠cios e funcionalidades
            4. Contexto de uso
            
            Forne√ßa uma an√°lise estruturada que ser√° usada para criar a release note.
            """,
            agent=requirements_analyst,
            expected_output="An√°lise estruturada da task identificando funcionalidades, impactos e benef√≠cios para o usu√°rio"
        )
        
        # Task 2: Reda√ß√£o da Release Note
        writing_task = Task(
            description=f"""
            Com base na an√°lise fornecida, escreva uma release note no estilo corporativo seguindo este exemplo:
            
            EXEMPLO DE FORMATO:
            ```
            ###[JBSV-3061] M√≥dulo Supervisor
            
            O M√≥dulo do Supervisor chegou para facilitar a gest√£o do time e dar mais clareza sobre os resultados, tudo em um s√≥ lugar dentro do Venda+.
            
            Agora, ao acessar o aplicativo com seu login, o supervisor pode selecionar o seu pr√≥prio CPF no momento do login e visualizar um painel de gerenciamento completo do time, com indicadores consolidados e tamb√©m a possibilidade de detalhar vendedor por vendedor.
            
            üìä **Principais funcionalidades:**
            
            ‚Ä¢ Funcionalidade 1 explicada de forma clara
            ‚Ä¢ Funcionalidade 2 com benef√≠cios pr√°ticos
            ‚Ä¢ Funcionalidade 3 focada no usu√°rio
            
            ‚úÖ **Benef√≠cios:**
            
            ‚Ä¢ Benef√≠cio pr√°tico 1
            ‚Ä¢ Benef√≠cio pr√°tico 2
            ‚Ä¢ Benef√≠cio pr√°tico 3
            ```
            
            IMPORTANTE:
            - Use linguagem clara e focada no usu√°rio final
            - Destaque os benef√≠cios pr√°ticos
            - Use emojis para tornar mais atrativo
            - Mantenha o tom profissional mas amig√°vel
            - Organize as informa√ß√µes de forma hier√°rquica
            - Para BUGS, foque na corre√ß√£o e melhoria da experi√™ncia
            
            Tipo da task: {task_data['tipo_task']}
            """,
            agent=technical_writer,
            expected_output="Release note bem escrita, clara e focada no usu√°rio final",
            context=[analysis_task]
        )
        
        # Task 3: Revis√£o e Formata√ß√£o Final
        review_task = Task(
            description=f"""
            Revise e formate a release note para garantir que siga EXATAMENTE este formato:
            
            Para HIST√ìRIA:
            ```
            ###[{task_data['jira_task_id']}] {task_data['jira_task_title']}
            
            [Conte√∫do da release note formatado]
            
            {f"![{task_data['evidence_image']}](/.attachments/{task_data['evidence_image']} =300x)" if task_data['evidence_image'] else ""}
            
            ---
            ```
            
            Para BUG:
            ```
            ###[{task_data['jira_task_id']}] {task_data['jira_task_title']}
            
            [Conte√∫do da release note formatado explicando a corre√ß√£o]
            
            {f"![{task_data['evidence_image']}](/.attachments/{task_data['evidence_image']} =300x)" if task_data['evidence_image'] else ""}
            
            ---
            ```
            
            VERIFICA√á√ïES OBRIGAT√ìRIAS:
            1. Header deve ser ###[ID] T√≠tulo exatamente
            2. Link da imagem deve ter o formato correto se fornecida
            3. Deve terminar com --- (linha separadora)
            4. Conte√∫do deve ser claro e bem estruturado
            5. Usar markdown apropriado para formata√ß√£o
            
            Retorne APENAS o markdown final formatado corretamente.
            """,
            agent=release_notes_reviewer,
            expected_output="Release note final formatada corretamente em markdown, pronta para o Azure DevOps",
            context=[writing_task]
        )
        
        return [analysis_task, writing_task, review_task]
    
    def generate_release_notes(self, task_data, image_path=None):
        """Gera release notes usando API do Groq diretamente"""
        try:
            # Preparar informa√ß√£o da imagem
            image_info = ""
            if image_path and task_data.get('evidence_image'):
                image_info = f"\n![{task_data['evidence_image']}](/.attachments/{task_data['evidence_image']} =300x)"
            
            prompt = f"""# Voc√™ √© um especialista em documenta√ß√£o t√©cnica. Crie uma release note profissional formatada em markdown.

## ENTRADA
Task ID: {task_data['jira_task_id']}
Tipo: {task_data['tipo_task']} 
T√≠tulo: {task_data['jira_task_title']}
Descri√ß√£o: {task_data['jira_task_description']}

## FORMATO EXATO DA SA√çDA
Gere EXATAMENTE neste formato markdown:

###[{task_data['jira_task_id']}] {task_data['jira_task_title']}

[Aqui voc√™ escreve 2-4 frases explicando a funcionalidade/corre√ß√£o de forma clara e profissional]{image_info}

---

## REGRAS IMPORTANTES:
1. Para Hist√≥ria: Explique o que foi implementado e qual o benef√≠cio para o usu√°rio
2. Para Bug: Explique qual era o problema e como foi resolvido
3. Use linguagem clara e profissional
4. Mantenha entre 2-4 frases
5. N√£o adicione links al√©m da imagem (se fornecida)
6. SEMPRE termine com "---"

Retorne APENAS o markdown formatado."""

            # Chamar a API do Groq
            response = self.client.chat.completions.create(
                model="llama3-8b-8192",
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=1024
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            raise Exception(f"Erro ao gerar release notes: {str(e)}")

# Fun√ß√£o auxiliar para usar no Streamlit
def create_release_notes_crew():
    return ReleaseNotesCrewAI()